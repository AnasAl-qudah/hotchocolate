schema {
  query: Query
}

type Actor {
  name: String!
  actedIn: [Movie!]!
}

"A segment of a collection."
type ActorsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Actor!]
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type Movie {
  title: String!
  genres: [Actor!]!
}

"A segment of a collection."
type MoviesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Movie!]
}

type Query {
  actors(skip: Int take: Int where: ActorFilterInput order: [ActorSortInput!]): ActorsCollectionSegment
  movies(skip: Int take: Int where: MovieFilterInput order: [MovieSortInput!]): MoviesCollectionSegment
}

input ActorFilterInput {
  and: [ActorFilterInput!]
  or: [ActorFilterInput!]
  name: StringOperationFilterInput
  actedIn: ListFilterInputTypeOfMovieFilterInput
}

input ActorSortInput {
  name: SortEnumType
}

input ListFilterInputTypeOfActorFilterInput {
  all: ActorFilterInput
  none: ActorFilterInput
  some: ActorFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMovieFilterInput {
  all: MovieFilterInput
  none: MovieFilterInput
  some: MovieFilterInput
  any: Boolean
}

input MovieFilterInput {
  and: [MovieFilterInput!]
  or: [MovieFilterInput!]
  title: StringOperationFilterInput
  genres: ListFilterInputTypeOfActorFilterInput
}

input MovieSortInput {
  title: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD